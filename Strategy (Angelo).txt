
Strategy (as suggested by Sri):

For each type and rank, we calculate P(policy sold | rank = x, type = t) by separating it as follows:

P(policy sold | rank = x, type = t) = P(policy sold | click = 1, rank = x, type = t) * P(click = 1 | rank = x, type = t)



We want P(policy sold | rank = x, type = t) >= 0.04 so that each type contributes enough sales to reach E(policies sold) >= 400.


At the moment, the current strategy is to assign argmax(P(rank = x | type = t)) over all ranks x = 1,2,3,4,5 to each type of person, t.
i.e. each type of person t gets the rank x which is most likely given the current data.

We find the first rank x among {1,2,3,5} which will achieve P(policy sold | rank = x, type = t) >= 0.04, and assign that
as the new rank for type = t. Our suggestion to Root Insurance will be to either bump up the current rank or lower it to 
the first x in {1,2,3,4,5} which achieves the desired 0.04 probability of sale.




We use the performing algorithms at each step. My analysis shows that for predicting the EVENT (policy sold | click = 1, rank = x, type = t),
the best model is LDA, with accuracy / precision / recall = 61% / 61% / 61%.

Similarly, for predicting the EVENT (click = 1 | rank = x, type = t) the best model is RFC with 73% / 74% / 73%.

For predicting the EVENT (rank = x | type = t), the best model is SVC with 42% / 52% / 42%.


Then we will compute the PROBABILITIES P(rank = x | type = t), P(click = 1 | rank = x, type = t), and P(policy sold | click = 1, rank = x, type = t)
using SVC, RFC, and LDA respectively. Then we multiply these together to get P(policy sold | rank = x, type = t) for each type and rank.